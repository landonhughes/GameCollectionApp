<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Game Collection</title>
    <link rel="stylesheet" href="style.css" type="text/css" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.13.0/css/all.min.css" rel="stylesheet">
</head>

<body>
    <div id="">
        <h1>Lookup Games</h1>
        <div id="search--wrapper">
            <input id="game-search-input" type="text" value="" placeholder="Add a game to your collection...">
            <button id="search-button"><i class="fa fa-search" aria-hidden="true"></i></button>
        </div>
    </div>
    <div id="found-games">

    </div>
    <h2>Current Collection</h2>
    <div id="collection">

    </div>
    <script type="module">
        const searchButtonEl = document.querySelector("#search-button");
        const gameSearchInputEl = document.querySelector("#game-search-input");
        const foundGamesSection = document.querySelector("#found-games");
        const collectionEl = document.querySelector("#collection");

        searchButtonEl.addEventListener("click", async () => {
            await performSearch();
        });

        function createButton(className, text, callback) {
            const button = document.createElement("button");
            button.className = className;
            button.textContent = text;
            button.addEventListener("click", callback);
            return button;
        }

        function renderGameToScreen(game) {
            console.log("GAME OBJ", game)
            const gameDivEl = document.createElement("div");
            gameDivEl.className = "game--wrapper";

            const gameTitleEl = document.createElement("p");
            gameTitleEl.textContent = game.name;
            gameDivEl.appendChild(gameTitleEl);

            if ("cover" in game) {
                const gameImageEl = document.createElement("img");
                gameImageEl.src = game.cover.url;
                gameDivEl.appendChild(gameImageEl);
            }

            const addButton = createButton("plus-button", "+", addButtonCallback);
            gameDivEl.appendChild(addButton);

            return gameDivEl;
        }

        function moveCard(card, fromSection, toSection, newButtonClass, newButtonText, newCallback) {
            const cardCopy = card.cloneNode(true);
            cardCopy.lastElementChild.remove(); // remove old button

            const newButton = createButton(newButtonClass, newButtonText, newCallback);
            cardCopy.appendChild(newButton);

            toSection.appendChild(cardCopy);
            fromSection.removeChild(card);
        }

        function addButtonCallback(event) {
            const card = event.target.parentElement;
            moveCard(card, foundGamesSection, collectionEl, "remove-button", "-", removeButtonCallback);
        }

        function removeButtonCallback(event) {
            const card = event.target.parentElement;
            moveCard(card, collectionEl, foundGamesSection, "plus-button", "+", addButtonCallback);
        }

        gameSearchInputEl.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                performSearch();
            }
        });

        async function performSearch() {
            let response = await fetch(`/game/${gameSearchInputEl.value}`);
            let jsonArrayOfGames = await response.json();

            for (const game of jsonArrayOfGames) {
                const gameDiv = renderGameToScreen(game);
                foundGamesSection.appendChild(gameDiv);
            }

            console.log(jsonArrayOfGames);
        }


    </script>
</body>

</html>